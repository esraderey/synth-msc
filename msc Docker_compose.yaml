
version: '3.8'

services:
  # MSC Framework Application
  msc-framework:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: msc-framework
    restart: unless-stopped
    ports:
      - "5000:5000"  # API & Web UI
      - "9090:9090"  # Prometheus metrics
    environment:
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - MSC_SECRET_KEY=${MSC_SECRET_KEY:-default-secret-key-change-me}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-default-jwt-key-change-me}
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://msc_user:msc_password@postgres:5432/msc_framework
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config.yaml:/app/config.yaml:ro
    depends_on:
      - redis
      - postgres
    networks:
      - msc-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: msc-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - msc-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: msc-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=msc_user
      - POSTGRES_PASSWORD=msc_password
      - POSTGRES_DB=msc_framework
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - msc-network

  # Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: msc-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - msc-network

  # Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: msc-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - msc-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: msc-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - msc-framework
    networks:
      - msc-network

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  msc-network:
    driver: bridge